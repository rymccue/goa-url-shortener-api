// Code generated by goagen v1.2.0-dirty, DO NOT EDIT.
//
// API "URL Shortener API": shortener Resource Client
//
// Command:
// $ goagen
// --design=github.com/rymccue/goa-url-shortener-api/design
// --out=$(GOPATH)/src/github.com/rymccue/goa-url-shortener-api
// --version=v1.2.0-dirty

package client

import (
	"bytes"
	"context"
	"fmt"
	"net/http"
	"net/url"
)

// AnalyticsShortenerPath computes a request path to the analytics action of shortener.
func AnalyticsShortenerPath(path string) string {
	param0 := path

	return fmt.Sprintf("/api/s/%s/analytics", param0)
}

// Get analytics for a url
func (c *Client) AnalyticsShortener(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewAnalyticsShortenerRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewAnalyticsShortenerRequest create the request corresponding to the analytics action endpoint of the shortener resource.
func (c *Client) NewAnalyticsShortenerRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}

// CreateShortenerPath computes a request path to the create action of shortener.
func CreateShortenerPath() string {

	return fmt.Sprintf("/api/s")
}

// Create a url
func (c *Client) CreateShortener(ctx context.Context, path string, payload *CreateLinkPayload) (*http.Response, error) {
	req, err := c.NewCreateShortenerRequest(ctx, path, payload)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewCreateShortenerRequest create the request corresponding to the create action endpoint of the shortener resource.
func (c *Client) NewCreateShortenerRequest(ctx context.Context, path string, payload *CreateLinkPayload) (*http.Request, error) {
	var body bytes.Buffer
	err := c.Encoder.Encode(payload, &body, "*/*")
	if err != nil {
		return nil, fmt.Errorf("failed to encode body: %s", err)
	}
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("POST", u.String(), &body)
	if err != nil {
		return nil, err
	}
	header := req.Header
	header.Set("Content-Type", "application/json")
	return req, nil
}

// DeleteShortenerPath computes a request path to the delete action of shortener.
func DeleteShortenerPath(path string) string {
	param0 := path

	return fmt.Sprintf("/api/s/%s", param0)
}

// Delete a url
func (c *Client) DeleteShortener(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewDeleteShortenerRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewDeleteShortenerRequest create the request corresponding to the delete action endpoint of the shortener resource.
func (c *Client) NewDeleteShortenerRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("DELETE", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}

// GetShortenerPath computes a request path to the get action of shortener.
func GetShortenerPath(path string) string {
	param0 := path

	return fmt.Sprintf("/api/s/%s", param0)
}

// Get a url
func (c *Client) GetShortener(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewGetShortenerRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewGetShortenerRequest create the request corresponding to the get action endpoint of the shortener resource.
func (c *Client) NewGetShortenerRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}

// UpdateShortenerPath computes a request path to the update action of shortener.
func UpdateShortenerPath(path string) string {
	param0 := path

	return fmt.Sprintf("/api/s/%s", param0)
}

// Update a url
func (c *Client) UpdateShortener(ctx context.Context, path string, payload *UpdateLinkPayload) (*http.Response, error) {
	req, err := c.NewUpdateShortenerRequest(ctx, path, payload)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewUpdateShortenerRequest create the request corresponding to the update action endpoint of the shortener resource.
func (c *Client) NewUpdateShortenerRequest(ctx context.Context, path string, payload *UpdateLinkPayload) (*http.Request, error) {
	var body bytes.Buffer
	err := c.Encoder.Encode(payload, &body, "*/*")
	if err != nil {
		return nil, fmt.Errorf("failed to encode body: %s", err)
	}
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("PUT", u.String(), &body)
	if err != nil {
		return nil, err
	}
	header := req.Header
	header.Set("Content-Type", "application/json")
	return req, nil
}
